using System.Net.Security;
using System.Text;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Server.Kestrel.Core;
using Microsoft.AspNetCore.Server.Kestrel.Https;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Azure;
using Microsoft.Identity.Web.UI;
using Microsoft.IdentityModel.Tokens;
using SchoolProject.Web;
using SchoolProject.Web.Data.DataContexts;
using SchoolProject.Web.Areas.Identity.Data;
using SchoolProject.Web.Data.Seeders;
using SchoolProject.Web.Helpers;
using SchoolProject.Web.Data.Entities.ExtraTables;


//using Microsoft.AspNetCore.Authentication.OpenIdConnect;


static string stringAleatoria(int comprimento = 64, bool comEspecias = true)
{
    // Definir o tamanho da string desejada (64 caracteres)
    var tamanhoString = 64;


    // Alfabeto que será utilizado para gerar a string aleatória
    var alfabetoAlfanumerico =
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    var alfabetoAlfanumericoEEspecias =
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_-+=[]{}|;:,.<>?";

    // Criar uma instância do gerador de números aleatórios
    var random = new Random();

    // Criar uma instância de StringBuilder para construir a string
    var sb = new StringBuilder(tamanhoString);

    // Gerar a string aleatória
    if (comEspecias)
    {
        for (var i = 0; i < tamanhoString; i++)
        {
            var index = random.Next(alfabetoAlfanumericoEEspecias.Length);
            var caractereAleatorio = alfabetoAlfanumericoEEspecias[index];
            sb.Append(caractereAleatorio);
        }
    }
    else
    {
        for (var i = 0; i < tamanhoString; i++)
        {
            var index = random.Next(alfabetoAlfanumerico.Length);
            var caractereAleatorio = alfabetoAlfanumerico[index];
            sb.Append(caractereAleatorio);
        }
    }

    // Obter a string final
    var stringAleatoria = sb.ToString();

    // Imprimir a string gerada
    Console.WriteLine(stringAleatoria);

    return stringAleatoria;
}


// ----------------------- -------------------------- ----------------------- //
// ----------------------- -------------------------- ----------------------- //


var builder = WebApplication.CreateBuilder(args);


// -----------------------------------------------------------------------------
//
// Add Azure services .
//
// -----------------------------------------------------------------------------


// Add services to the container.
builder.Services.AddAzureClients(clientBuilder =>
{
    clientBuilder.AddBlobServiceClient(
        builder.Configuration["AzureStorage:SchoolProjectStorageNuno:blob"],
        true);

    clientBuilder.AddQueueServiceClient(
        builder.Configuration["AzureStorage:SchoolProjectStorageNuno:queue"],
        true);
});


// ----------------------- -------------------------- ----------------------- //
// ----------------------- -------------------------- ----------------------- //


// -----------------------------------------------------------------------------
//
// Database connection via data-context
//
// -----------------------------------------------------------------------------


builder.Services.AddDbContext<DataContextMsSql>(
    cfg =>
    {
        cfg.UseSqlServer(
            builder.Configuration.GetConnectionString(
                "SchoolProject-mssql.somee.com"),
            options =>
            {
                options.EnableRetryOnFailure();
                options.MigrationsAssembly("SchoolProject.Web");
                options.MigrationsHistoryTable("_MyMigrationsHistory");
            });
    });


builder.Services.AddDbContext<DataContextMySql>(
    cfg =>
    {
        cfg.UseMySQL(
            builder.Configuration.GetConnectionString(
                "SchoolProject-MySQL") ?? string.Empty,
            options =>
            {
                options.MigrationsAssembly("SchoolProject.Web");
                options.MigrationsHistoryTable("_MyMigrationsHistory");
            });
    });


builder.Services.AddDbContext<DataContextSqLite>(
    cfg =>
    {
        cfg.UseSqlite(
            builder.Configuration.GetConnectionString(
                "SchoolProject-SQLite"), options =>
            {
                options.MigrationsAssembly("SchoolProject.Web");
                options.MigrationsHistoryTable("_MyMigrationsHistory");
            });
    });


// ----------------------- -------------------------- ----------------------- //
// ----------------------- -------------------------- ----------------------- //


// -----------------------------------------------------------------------------
//
// add identity service and configure it,
// and also connected to the default database
//
// -----------------------------------------------------------------------------
builder.Services.AddIdentity<User, IdentityRole>(
        cfg =>
        {
            // User settings.
            //cfg.User.AllowedUserNameCharacters =
            //         "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._@+";
            cfg.User.RequireUniqueEmail = true;


            // Password settings.
            cfg.Password.RequireDigit = false;
            cfg.Password.RequiredLength = 6;
            cfg.Password.RequiredUniqueChars = 0;
            cfg.Password.RequireUppercase = false;
            cfg.Password.RequireLowercase = false;
            cfg.Password.RequireNonAlphanumeric = false;


            // SignIn settings.
            cfg.SignIn.RequireConfirmedEmail = true;
            cfg.SignIn.RequireConfirmedAccount = false;
            cfg.SignIn.RequireConfirmedPhoneNumber = false;

            // Lockout settings.
            //     cfg.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(5);
            //     cfg.Lockout.MaxFailedAccessAttempts = 5;
            //     cfg.Lockout.AllowedForNewUsers = true;
            //

            // Token settings.
            cfg.Tokens.AuthenticatorTokenProvider =
                TokenOptions.DefaultAuthenticatorProvider;
        })
    .AddDefaultTokenProviders()
    .AddEntityFrameworkStores<DataContextMsSql>()
    .AddEntityFrameworkStores<DataContextMySql>()
    .AddEntityFrameworkStores<DataContextSqLite>();


// se estiverem ambos os AddIdentity e AddDefaultIdentity
// o AddIdentity sobrepõe o AddDefaultIdentity
// mas a aplicação não corre
//
// já esta no AddIdentity
//
// senão adicionar aqui
//
// services.AddDefaultIdentity<IdentityUser>(
//         options =>
//         {
//             options.SignIn.RequireConfirmedAccount = false;
//
//             // options.SignIn.RequireConfirmedAccount = true;
//         })
//     .AddEntityFrameworkStores<DataContextMsSql>()
//     .AddEntityFrameworkStores<DataContextMySql>()
//     .AddEntityFrameworkStores<DataContextSqLite>();


// PRODUCTION
// Services for production.
// services.Configure<IdentityOptions>(options =>
// {
//     // Password settings.
//     options.Password.RequireDigit = true;
//     options.Password.RequireLowercase = true;
//     options.Password.RequireNonAlphanumeric = true;
//     options.Password.RequireUppercase = true;
//     options.Password.RequiredLength = 8;
//     options.Password.RequiredUniqueChars = 1;
//
//     // Lockout settings.
//     options.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(5);
//     options.Lockout.MaxFailedAccessAttempts = 5;
//     options.Lockout.AllowedForNewUsers = true;
//
//     // User settings.
//     options.User.AllowedUserNameCharacters =
//         "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._@+";
//     options.User.RequireUniqueEmail = false;
// });


// --------------------------------------------- ----------------------- //
// --------------------------------------------- ----------------------- //


// --------------------------------------------- ----------------------- //
// ------------------- USERS AUTHENTICATION SECTION -------------------- //
// --------------------------------------------- ----------------------- //


builder.Services.AddApplicationInsightsTelemetry();
//
// Add Application Insights services into service collection
//
// builder.Services.AddApplicationInsightsTelemetry(
//     builder.Configuration["APPLICATIONINSIGHTS_CONNECTION_STRING"]);

// or
builder.Services.AddApplicationInsightsTelemetry(
    options => options.ConnectionString =
        "APPLICATIONINSIGHTS_CONNECTION_STRING"
);


// --------------------------------------------- ----------------------- //
// --------------------------------------------- ----------------------- //


// --------------------------------------------- ----------------------- //
// ------------------- USERS AUTHENTICATION SECTION -------------------- //
// --------------------------------------------- ----------------------- //


// builder.WebHost.ConfigureKestrel(options =>
// {
//     options.ListenAnyIP(9999, listenOptions =>
//     {
//         listenOptions.Protocols = HttpProtocols.Http1AndHttp2AndHttp3;
//
//         listenOptions.UseHttps(new TlsHandshakeCallbackOptions
//         {
//             OnConnection = context =>
//             {
//                 var options = new SslServerAuthenticationOptions
//                 {
//                     ServerCertificate =
//                         MyResolveCertForHost(context.ClientHelloInfo.ServerName)
//                 };
//                 return new ValueTask<SslServerAuthenticationOptions>(options);
//             },
//         });
//     });
// });


// --------------------------------------------- ----------------------- //
// --------------------------------------------- ----------------------- //


// --------------------------------------------- ----------------------- //
// ------------------- USERS AUTHENTICATION SECTION -------------------- //
// --------------------------------------------- ----------------------- //


//
// Configurando a autenticação JWT
builder.Services
    .AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddCookie()
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters =
            new TokenValidationParameters
            {
                ValidateIssuer = true,
                ValidateAudience = true,
                ValidateLifetime = true,
                ValidateIssuerSigningKey = true,

                ValidIssuer = builder.Configuration["Tokens:Issuer"],
                ValidAudience = builder.Configuration["Tokens:Audience"],

                IssuerSigningKey =
                    new SymmetricSecurityKey(
                        Encoding.UTF8.GetBytes(
                            builder.Configuration["Tokens:Key"] ??
                            string.Empty))
            };


        options.Events = new JwtBearerEvents
        {
            OnAuthenticationFailed = context =>
            {
                if (context.Exception.GetType() ==
                    typeof(SecurityTokenExpiredException))
                    context.Response.Headers.Add("Token-Expired", "true");

                return Task.CompletedTask;
            }
        };


        // Atualize o evento OnAuthenticationFailed
        //options.Events = new JwtBearerEvents
        //{
        //    OnAuthenticationFailed = context =>
        //    {
        //        if (context.Exception.GetType() == typeof(SecurityTokenExpiredException))
        //        {
        //            // Obtenha a data de expiração do token
        //            var expirationDate = context.SecurityToken.ValidTo;

        //            // Calcule o tempo restante
        //            var timeRemaining = GetTimeRemaining(expirationDate);

        //            // Adicione um cabeçalho personalizado à resposta HTTP
        //            context.Response.Headers.Add("Token-Remaining-Time", timeRemaining.TotalDays.ToString());
        //        }
        //        return Task.CompletedTask;
        //    }
        //};
    });


builder.Services
    .AddAuthentication("CookieAuth")
    .AddCookie("CookieAuth",
        config =>
        {
            config.Cookie.Name = "SuperShop.Cookie";

            config.LoginPath = "/Home/Authenticate";
            config.AccessDeniedPath = "/Home/Authenticate";

            // config.LoginPath = "/Home/Authenticate";
            // config.AccessDeniedPath = "/Home/Authenticate";
        });


// criado por nos, para configurar o tempo de expiração do cookie
// e redirecionar para a página de login
builder.Services.ConfigureApplicationCookie(options =>
{
    // Cookie settings
    options.Cookie.HttpOnly = true;

    // ExpireTimeSpan settings
    // options.ExpireTimeSpan = TimeSpan.FromTicks(5);
    // options.ExpireTimeSpan = TimeSpan.FromMilliseconds(5);
    // options.ExpireTimeSpan = TimeSpan.FromSeconds(5);
    // options.ExpireTimeSpan = TimeSpan.FromMinutes(5);
    // options.ExpireTimeSpan = TimeSpan.FromHours(5);
    // options.ExpireTimeSpan = TimeSpan.FromDays(5);

    options.ExpireTimeSpan = TimeSpan.FromDays(15);


    // LoginPath and AccessDeniedPath settings
    options.LoginPath = "/Account/NotAuthorized";
    options.AccessDeniedPath = "/Account/NotAuthorized";

    options.SlidingExpiration = true;
});


//services.ConfigureApplicationCookie(options =>
//{
//    // Cookie settings
//    options.Cookie.HttpOnly = true;
//    options.ExpireTimeSpan = TimeSpan.FromMinutes(5);

//    options.LoginPath = "/Identity/Account/Login";
//    options.AccessDeniedPath = "/Identity/Account/AccessDenied";
//    options.SlidingExpiration = true;
//});


builder.Services.Configure<CookiePolicyOptions>(options =>
{
    options.CheckConsentNeeded = context => true;

    options.MinimumSameSitePolicy = SameSiteMode.None;

    options.ConsentCookie.IsEssential = true;
    options.ConsentCookie.Expiration = TimeSpan.FromDays(30);
    options.ConsentCookie.SecurePolicy = CookieSecurePolicy.Always;
    options.ConsentCookie.HttpOnly = true;
});


builder.Services
    .AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)
    .AddCookie(options =>
    {
        options.LoginPath = "/Account/Login";
        options.LogoutPath = "/Account/Logout";
        options.AccessDeniedPath = "/Account/AccessDenied";
    });


builder.Services.AddAuthorization(options =>
{
    options.AddPolicy(
        "IsAdmin", policy => policy.RequireClaim("IsAdmin"));

    options.AddPolicy(
        "IsStudent", policy => policy.RequireClaim("IsStudent"));

    options.AddPolicy(
        "IsTeacher", policy => policy.RequireClaim("IsTeacher"));

    options.AddPolicy(
        "IsUser", policy => policy.RequireClaim("IsUser"));

    options.AddPolicy(
        "IsAnonymous", policy => policy.RequireClaim("IsAnonymous"));
});


builder.Services.AddAntiforgery();


builder.Services.AddLocalization(options =>
    options.ResourcesPath = "Resources");


builder.Services.AddMvc().AddViewLocalization();
builder.Services.AddMvcCore().AddViewLocalization();
// builder.Services.AddRazorPages();
builder.Services.AddRazorPages().AddMicrosoftIdentityUI().AddViewLocalization();
// builder.Services.AddAuthentication(OpenIdConnectDefaults.AuthenticationScheme);


builder.Services.AddControllersWithViews().AddViewLocalization();
//builder.Services.AddControllersWithViews(options =>
//{
//    var policy =
//        new AuthorizationPolicyBuilder().RequireAuthenticatedUser().Build();

//    options.Filters.Add(new AuthorizeFilter(policy));
//});


builder.Services.AddLogging();


// Configure JSON logging to the console.
// builder.Logging.AddJsonConsole();

// Configure logging to the console.
builder.Logging.AddDebug();
builder.Logging.AddConsole();
// builder.Logging.AddEventLog();
builder.Logging.AddEventSourceLogger();
builder.Logging.AddApplicationInsights();


//
// Seeding databases
builder.Services.AddTransient<SeedDb>();

//
// injecting repositories helpers
builder.Services.AddScoped<UserManager<User>>();
builder.Services.AddScoped<IUserHelper, UserHelper>();

builder.Services.AddScoped<IImageHelper, ImageHelper>();
builder.Services.AddScoped<IStorageHelper, StorageHelper>();
builder.Services.AddScoped<IConverterHelper, ConverterHelper>();

//
// injecting mock repositories
//services.AddScoped<IRepository, Repository>();
//services.AddScoped<IRepository, MockRepository>();

//
// injecting real repositories
//builder.Services.AddScoped<IOrderRepository, OrderRepository>();
//builder.Services.AddScoped<ICountryRepository, CountryRepository>();
//builder.Services.AddScoped<IProductsRepository, ProductRepository>();

//
// injecting cloud repositories
//builder.Services.AddScoped<GcpConfigOptions>();
//builder.Services.AddScoped<AWSConfigOptions>();
//builder.Services.AddScoped<ICloudStorageService, CloudStorageService>();


var app = builder.Build();


app.Logger.LogInformation("The app started");


// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");


    // The default HSTS value is 30 days.
    // You may want to change this for production scenarios,
    // see https://aka.ms/aspnetcore-hsts.
    app.UseHsts();
}


app.UseHttpsRedirection();
app.UseStaticFiles();


app.UseRouting();


app.UseAuthentication();
app.UseAuthorization();


app.MapControllerRoute(
    "default",
    "{controller=Home}/{action=Index}/{id?}");


app.MapRazorPages();


app.Run();