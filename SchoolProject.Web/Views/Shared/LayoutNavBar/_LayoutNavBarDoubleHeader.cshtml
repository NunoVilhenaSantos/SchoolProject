@using SchoolProject.Web.Data.Entities.Users
@using SchoolProject.Web.Helpers.Users
@using System.Diagnostics
@using Microsoft.AspNetCore.Identity
@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager
@* @inject HttpContext HttpContext *@
@inject IUserHelper UserHelper


@* --------------------------------------------------- *@
@* Barras de navegação para testes número 5            *@
@* --------------------------------------------------- *@

@{
    var currentController = ViewContext.RouteData.Values["controller"] as string;
    var currentAction = ViewContext.RouteData.Values["action"] as string;

    Debug.Assert(Context.User.Identity != null, "Context.AppUser.Identity != null");

    @* @Context.AppUser.Identity.IsAuthenticated *@
    @* @Context.AppUser.Identity.Name *@
    @* @Context.AppUser.Identity.AuthenticationType *@

    // var principal = Context.AppUser;
    @* @foreach (Claim claim in principal.Claims) *@
    @* { *@
    @*     <p>CLAIM TYPE: @claim.Type; CLAIM VALUE: @claim.Value</p> *@
    @* } *@


    Debug.Assert(User != null, "AppUser != null");
    Debug.Assert(User.Identity != null, "AppUser.Identity != null");
    @* @AppUser.Identity.IsAuthenticated *@
    @* @AppUser.Identity.Name *@
    @* @AppUser.Identity.AuthenticationType *@

    @* @(AppUser.Identity.IsAuthenticated && (AppUser.IsInRole("Admin") || AppUser.IsInRole("SuperAdmin"))) *@
    @* @(AppUser.Identity.IsAuthenticated && AppUser.HasClaim("IsAdmin", "true")) *@
}

@{
    if (User.Identity.IsAuthenticated)
    {
        var user = await UserManager.GetUserAsync(User);
        if (user != null)
        {
            var userRoles = await UserManager.GetRolesAsync(user);
            foreach (var role in userRoles)
            {
                <p>@role</p>
            }
        }
    }
}


<div class="b-example-divider d-none">Layout Footer Double 1.ª</div>
@*
<div class="px-3 py-2 border-bottom">
    *@
    @* <button type="button" class="btn btn-primary">Primary</button> *@
    @* <button type="button" class="btn btn-secondary">Secondary</button> *@
    @* <button type="button" class="btn btn-success">Success</button> *@
    @* <button type="button" class="btn btn-danger">Danger</button> *@
    @* <button type="button" class="btn btn-warning">Warning</button> *@
    @* <button type="button" class="btn btn-info">Info</button> *@
    @* <button type="button" class="btn btn-light">Light</button> *@
    @* <button type="button" class="btn btn-dark">Dark</button> *@
    @* <button type="button" class="btn btn-link">Link</button> *@

@*
    <div class="container">
        <div class="d-flex flex-wrap align-items-center justify-content-center justify-content-lg-start">

            <a href="/"
               class="d-flex align-items-center my-2 my-lg-0 me-lg-auto text-decoration-none">
                <svg aria-label="School Management" class="bi me-2" fill="currentColor"
                     height="48" role="img" width="auto">
                    <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#house-gear"/>
                </svg>
            </a>

            <ul class="nav col-12 col-lg-auto my-2 justify-content-center my-md-0 text-small">
                <li>
                    <a href="#" class="nav-link text-secondary">
                        <svg class="bi d-block mx-auto mb-1" fill="currentColor" height="24" width="24">
                            <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#house-door"/>
                        </svg>
                        Home
                    </a>
                </li>
                <li>
                    <a href="#" class="nav-link ">
                        <svg class="bi d-block mx-auto mb-1" fill="currentColor" height="24" width="24">
                            <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#speedometer2"/>
                        </svg>
                        Dashboard
                    </a>
                </li>
                <li>
                    <a href="#" class="nav-link ">
                        <svg class="bi d-block mx-auto mb-1" fill="currentColor" height="24" width="24">
                            <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#table"/>
                        </svg>
                        Orders
                    </a>
                </li>
                <li>
                    <a href="#" class="nav-link ">
                        <svg class="bi d-block mx-auto mb-1" fill="currentColor" height="24" width="24">
                            <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#grid"/>
                        </svg>
                        Products
                    </a>
                </li>
                <li>
                    <a href="#" class="nav-link ">
                        <svg class="bi d-block mx-auto mb-1" fill="currentColor" height="24" width="24">
                            <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#person-circle"/>

                        </svg>
                        Customers
                    </a>
                </li>
            </ul>

        </div>
    </div>
</div>
*@

<div class="b-example-divider d-none">Layout Footer Double 2.ª</div>
<div class="px-3 py-2 border-bottom mb-3">

    @* <button type="button" class="btn btn-outline-primary">Primary</button> *@
    @* <button type="button" class="btn btn-outline-secondary">Secondary</button> *@
    @* <button type="button" class="btn btn-outline-success">Success</button> *@
    @* <button type="button" class="btn btn-outline-danger">Danger</button> *@
    @* <button type="button" class="btn btn-outline-warning">Warning</button> *@
    @* <button type="button" class="btn btn-outline-info">Info</button> *@
    @* <button type="button" class="btn btn-outline-light">Light</button> *@
    @* <button type="button" class="btn btn-outline-dark">Dark</button> *@

    <div class="container d-flex flex-wrap justify-content-center">

        <form class="col-12 col-lg-auto mb-2 mb-lg-0 me-lg-auto" role="search">
            <input aria-label="Search" class="form-control" id="search-navbar" placeholder="Search..." type="search">
        </form>

        @* <div class="text-end"> *@
        @*     <button type="button" class="btn btn-light text-dark me-2">Login</button> *@
        @*     <button type="button" class="btn btn-primary">Sign-up</button> *@
        @* </div> *@

        @* // altera os botões que iram aparecer consoante o estado do utilizador *@
        <div class="b-example-divider d-none">Buttons for login and register appUser / change appUser and logout</div>
        <div class="text-end">
            @if (User.Identity.IsAuthenticated)
            {
                <a asp-action="ChangeUser" asp-area="" asp-controller="Account"
                   class="btn btn-light text-dark me-2  @(currentAction == "ChangeUser" && currentController == "Account" ? "active" : "")">
                    <span class="material-symbols-outlined">settings_account_box</span>
                    @* @AppUser.Identity?.Name *@
                    Hello @await UserHelper.GetUserInitialsAsync()
                </a>

                <a asp-action="LogOut" asp-area="" asp-controller="Account"
                   class="btn btn-primary  @(currentAction == "LogOut" && currentController == "Account" ? "active" : "")">
                    <span class="material-symbols-outlined">logout</span>
                    Logout
                </a>
            }
            else
            {
                <a asp-action="Login" asp-area="" asp-controller="Account"
                   class="btn btn-light text-dark me-2  @(currentAction == "Login" && currentController == "Account" ? "active" : "")">
                    <span class="material-symbols-outlined">login</span>
                    Login
                </a>

                <a asp-action="Register" asp-area="" asp-controller="Account"
                   class="btn btn-primary  @(currentAction == "Register" && currentController == "Account" ? "active" : "")">
                    <span class="material-symbols-outlined">person_add</span>
                    Register
                </a>
            }
        </div>

        @* // mostra o painel offcanvas de configuração da conta *@
        <div class="b-example-divider d-none">Buttons to open the off-canvas panel on the left (Account Panel)</div>
        @if (User.Identity.IsAuthenticated)
        {
            <div class="nav-item py-2 py-lg-1 col-12 col-lg-auto">
                <div class="vr d-none d-lg-flex h-100 mx-lg-2 "></div>
                <hr class="d-lg-none my-2 ">
            </div>

            <div class="text-end">
                <button
                    aria-controls="offCanvasAccountConfiguration" class="btn btn-info"
                    data-bs-target="#offCanvasAccountConfiguration" data-bs-toggle="offcanvas" type="button">
                    <span class="material-symbols-outlined">settings_account_box</span>
                    Account Panel
                </button>

            </div>
        }

        @* // mostra o painel offcanvas do painel do admin (funções exclusivas dos admins) *@
        @* @if (AppUser.Identity.IsAuthenticated && (AppUser.IsInRole("Admin") || AppUser.IsInRole("SuperAdmin"))) *@
        <div class="b-example-divider d-none">Buttons to open the off-canvas panel on the right (Admin Panel)</div>
        @if (User.Identity.IsAuthenticated && User.HasClaim("IsAdmin", "true"))
        {
            <div class="nav-item py-2 py-lg-1 col-12 col-lg-auto">
                <div class="vr d-none d-lg-flex h-100 mx-lg-2 "></div>
                <hr class="d-lg-none my-2 ">
            </div>

            <div class="text-end">
                @* <a *@
                @*     aria-controls="offCanvasAdminPanel" class="btn btn-primary" *@
                @*     data-bs-toggle="offcanvas" href="#offCanvasAdminPanel" role="button"> *@
                @*     Admin Panel *@
                @* </a> *@

                <button
                    aria-controls="offCanvasAdminPanel" class="btn btn-info"
                    data-bs-target="#offCanvasAdminPanel" data-bs-toggle="offcanvas" type="button">
                    <span class="material-symbols-outlined">settings_account_box</span>
                    Admin Panel
                </button>

                @* <button *@
                @*     aria-controls="offcanvasRight" class="btn btn-primary" *@
                @*     data-bs-target="#offCanvasAdminPanel" data-bs-toggle="offcanvas" type="button"> *@
                @*     <span class="material-symbols-outlined">settings_account_box</span> *@
                @*     Toggle right offcanvas *@
                @* </button> *@

            </div>
        }

        <div class="b-example-divider d-none">dark mode switch panel section</div>
        <span class="nav-item py-2 py-lg-1 col-12 col-lg-auto dark-mode-switch-panel-section">
            <div class="vr d-none d-lg-flex h-100 mx-lg-2 "></div>
            <hr class="d-lg-none my-2 "/>
        </span>

        <div class="form-check form-switch me-2 dark-mode-switch-panel-section">
            <div class="d-flex flex-column">
                <input class="form-check-input order-1 align-self-center dark-mode-switch"
                       type="checkbox" id="darkModeSwitch2">
                <label class="form-check-label order-2 align-self-center text-wrap" for="darkModeSwitch2">
                    Dark Mode
                </label>
            </div>
        </div>

    </div>
</div>